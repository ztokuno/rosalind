#!/usr/bin/env python3
# BA4B
# Find Substrings of a Genome Encoding a Given Amino Acid String

codon_table = {
        'ATA': 'I', 'ATC': 'I', 'ATT': 'I', 'ATG': 'M',
        'ACA': 'T', 'ACC': 'T', 'ACG': 'T', 'ACT': 'T',
        'AAC': 'N', 'AAT': 'N', 'AAA': 'K', 'AAG': 'K',
        'AGC': 'S', 'AGT': 'S', 'AGA': 'R', 'AGG': 'R',
        'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L',
        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCT': 'P',
        'CAC': 'H', 'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'CGA': 'R', 'CGC': 'R', 'CGG': 'R', 'CGT': 'R',
        'GTA': 'V', 'GTC': 'V', 'GTG': 'V', 'GTT': 'V',
        'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCT': 'A',
        'GAC': 'D', 'GAT': 'D', 'GAA': 'E', 'GAG': 'E',
        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGT': 'G',
        'TCA': 'S', 'TCC': 'S', 'TCG': 'S', 'TCT': 'S',
        'TTC': 'F', 'TTT': 'F', 'TTA': 'L', 'TTG': 'L',
        'TAC': 'Y', 'TAT': 'Y', 'TAA': '_', 'TAG': '_',
        'TGC': 'C', 'TGT': 'C', 'TGA': '_', 'TGG': 'W',
    }


def reverse_complement(dna):
    """Generate the reverse complement of a DNA sequence."""
    complements = {'A': 'T', 'C': 'G', 'T': 'A', 'G': 'C'}
    return ''.join([complements[base] for base in dna[::-1]])


def translate(dna):
    """Translate a DNA string into a peptide."""
    if len(dna) % 3 != 0:
        return
    return ''.join([codon_table[dna[i: i+3]] for i in range(0, len(dna), 3)])


def find_substrings_encoding_amino_acid(dna, peptide):
    """Find Substrings of a Genome Encoding a Given Amino Acid String."""
    rev_comp = reverse_complement(dna)
    k = len(peptide) * 3
    substrings = []

    for start in [0, 1, 2]:
        # loop through forward sequence
        for i in range(start, len(dna), 3):
            substring = dna[i: i+k]
            if len(substring) != k:
                break
            if translate(substring) == peptide:
                substrings.append(substring)
        # loop through reverse complement
        for i in range(start, len(rev_comp), 3):
            substring = rev_comp[i: i+k]
            if len(substring) != k:
                break
            # if substring is a match, append reverse complement of it so it matches original string
            if translate(substring) == peptide:
                substrings.append(reverse_complement(substring))

    return substrings


def check_answers(substrings, answers):
    """Method to check answer. Compares multisets of substrings and answers."""
    from collections import Counter
    return Counter(substrings) == Counter(answers)


def main():
    # dna = 'ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA'
    # peptide = 'MA'
    dna = 'ATCAGCTTCGCCATGGGCATTATATGCAGATAGAGCTAGCAGACTGGCTTGTAAGGAGACGGCACGTTCGTTGGTTGAAAGGCTGATATATCATTGAGAAGGGGTACACAATTTATATTCATACGTGGATGTACGAATAGGCCCTTGGGCCCACCAGTTAGATCTTATGCCCTCTAAGTAGAGGTTCCATCACGGATAACAGCCCCTTTCTACCCCGATGTGGCCTCTAACCAGCAGATCAGGCATACGGTCCAGCGCAAGCATCGAATTCGCAGTACACAATATATATTCACACCTGGATGGCACATTGGTCGGATAAAGATCGTAGGGTGAACTTAAGTAACCGGCATCCATGTATGTATATATATGGTATAGTAGAAAACGACGGTCTCATTAATTGAGTCTTTTGGGTATCATGGGACGGTGTTATCTCCCCTCGGTTTCGTTGAAACATCACTAACGATACATATATACCAGTATTCTGCTCTGGACCACTCAGAGGCGTAAGTAATGAACTTCGACCAAATGTCCCGGCGTGGGTCGGTTTTTACCCTACGCTATTATAGTTGGAGCATTTATTCCGTGTGCGAGTCGAGGTTTAATGTCTAGAATATTGGGTCACCGTGGTGAAATGTATTCGCCTCCCGCGACAACCGGATCGCACACTCAACGTTACTTATCGCTCGTACGTAAAGTAACGCATCCAAGACTCATTTGCGGTCTAAAATCGCTGGTCTTCTCGTGTTATGGTTCAGGGCTTATGTGAGAAGTTCTTACACTGCGGCTCCGTCTTTCCACTTAAGTGAGCTAGGGGAGCCATAGCCCACTGTCATCTATCTATTTTCAGAATAGCATATCCAACCCGGTCCAAAGCATGACCGTCTATATTACCGCCGACTCTACGACCTTGCCGTTTGGTTCACTTGGTGAGCAATGACTGCACCTGGGCCCCGCACGTTGCGGAACGGCGCTACCAGCCCTTTCTTACAACTGTACTTAAATTTGGTTAACCATAATTAGGATACGTCTTGCTATCGCGTGCCAAATCGATGACCTTATGCACTATAGCAAGCGTTGAAACACGTCGTTCGTCAATATGCCGCAAAGGTGTAGAGATCTGTTCGCACCGTTAACCTGCGTGGGACTGGTAGTCGGCATCTATCCAAGTCCGCACGCGAGCAAGCATACCCTGACAATAAAAGCGCCATGCTTTACTAAGCAGGCGTACAATTACAAAACGCGTGGCTCCATCCGTCTGGGACCGAGTGATACTTCGTTGAACCGTAGTGGATAATTCGACGCTCAAAATTCTCCCTGCTTCCTCCCGCTCTGCGGAATGACCGTATTAGAATACAGTTCCGTAGTTTTAGCCAGCCTAATAGGCATGCCTGCATAGTAATACCACGCCCGCGTTTTAAGCGTTTGTCGTCGTGTGAAGCTGCTCTAACGAAATGGGAACGGTCCCTGAGTTTCGCCATGCCAGAGCGGCTTCAGCGATAACTGAAATACAGAGCCTGATTTCTTTACCGGATCCCAACGGATGGGTGATGTACCCGAACAGGGCTGTAGGATAAGTTAATTAGAGTATATCGACCAAGCCAGTCTATCAAAAATCAGGAACGGACGAAAGCATATATCGATATCTCCTCTAATCGCGAAGGCCCGCGGGAAGTAACGGATTTCCTCCCAGTTCCCTAGCTTTATTTCACCTAGATGACTGTTCTTAACCTACTGCCGCGAGACGCCAGGAAAGAGAGGTGTCTCTTACCCTAAGTAAGCCATGTGATTTGAGACCATCCACGTATGAATATATATGGTATAAAATCATATCGTCCCCCAGAAACTCAATTATGGCCAGACCGAATAACCACCGCACTAATAGCACTATGTGACTAGTCGTGAGAACCTCAAGCAAAATGTCCTCAGAGGTTTAACTACGGGCTGCACATCTTTCTCTACAGTTACTGACAAGTCGTACCGACAAATTGCCCGTGGGTTTAACAAAATCGCAGCGGGAAATACACTGGGTTCTTTCCAAACAACAGTGAAAAGAAATGGCTAAGGACTCGAAAGGACCCAGAGGTTAGACAGCGTCTGTTCAACCCATGCGTGAGATGCGTCTGGCCTATTCTGTCGTTCAGCACACTCTGTCTGAACGCAAAAAGGAGACGAGCTGCGAAGTATATACAATCTACATCCACACTTGGATGGCAGTGGTCCAATTATCACCCTATGTAAGTATCGACAACGCGATCATTCCCGGGTCGGGGCTTACCGAACCGACATCACCTTAGCGGCTTTCCATAATCCCGGTTTTTAGCCACTGATTGTAGTTGGTGGTTGAATCCACGTAATACCTGATACGTTAATGATCATCAGTTTTCCTCCTATCTGGGTATGGCCGTGACCCCCCGTGGCACTTGGCACCTTTCGGACTCACAAGAACACGTCTGGGCGGTACTTGCGCGTTTGTTCAGTCCGAGGCATGCTAGAGGCATCCCACACTTGAATCTAGTCGCTCGGGAAGGTACGACTTAGAAAGTCGCAGGCAAGTGACAAAATACATTGCCCTAAATCCTACGCTCCATTGTTCATCCACGTATGAATGTAAATAGTATACACAATCTATATACATACTTGGATGCACTATCTACATCCATACGTGGATGACATCTTCACGGCAGAGACGCCCGGACCAATCTCTAATTGATGCACTCGTGGTAATGTTAGGCATATACCATTTATATACACACCTGGATGACTTGATCCTCTCCAGTACAATGTAATCACACACAGAGCCAAATGTGTAATCTGGATCAGATCACCGGAGGACTCGCGTGCTGCTGTTGGAGAGACATCTTGCGACCATCAGCGCGACGTTGGGTGAATCACTTCTAGGGCGCACCCCTTAGTCCCCGACAGCGCGGTGAGTTTAGGCGATTCAAATCCCGGCCCAAGATCCACGCTCTGATGATCCTGATCTTTGTAAGGAGAGACCCACGAAGGATTCGTACATCGCAACGACCATCTACTTAACGCGAGATAGCTGGGTACGAATTCCCCCCCACGTGGCCGACGTGGGACTGACAAGCAGCGATAATTAACTCATGCGCAACGCCCATAGGAATTTCTGTGAACAACCCCCATGCTCGGTATTAACAAAGATGTTCGATACCCAGTTATCTCCTTAAGATGATTCCGAGAATAAATGCAGATAGCCCTCAGACTCAGGGGCGATATGTCAAACCCCTGTATTTGTAATACCTACCAAGGGTGGAACGGCAGCCGTCAGCCCGTGACTATCGGGCAGGGACCCCAGTGCTGAGGCTATCCTTTGGACTAAAGATACTTCCCCCTACCCACGCAACGGCTCTATGGGATGGAGAGCGAACCGTAGCTGGGGGACATCCACGTATGTATGTAAATAGTATACTCGGCCATACACCCCACTTGAGCGCATAAGCTTGCGAGCCGGTCATCAGTACTTTACTGCGTTTAAACGAACGTACCACGCGGGATAGATGCAGGACCTACAGATGCCTCTTCCTTCGAGCGATACATGCCTTGTTCCGTGAATCGTATCCAGGTTTAAAAATGATAGACTCTGCTCAACTTACGGTCCCACAGCTCTACGGAACACGTGAGTGGCAGCAGCCTTTGGCAGTGCGCCAATGCTTCAATTTCCACAAAATCTTCGTCAAGACGACCTAACGTCTTGTGCAAGACTCACGCATATGTGGTAAAAATCGTTGTCACTTCTCGGTACCGACATATGTAGCAGCGAATAGGTTCAACAATGAACGGTGGACTCCATTTGACGAATTTAAATCCGCATCGGCTATATTTACATTACTTGCGCAACTACAACGAGGCTTGAAGTGGCCTTTAGCAAAAAGTCTGGGTGGACGACATCCAAGTGTGTATGTATATCGTGTATACTAACATGCGGGAAAATCACGCACTAATATGCACGCTACATATAAGGAGTTATACCCAGCCCTGGCCTTATGTTAGACTCGTACAGTACCTTACTGCATTTACACGCATAGTTACTAAGAGCTTGCCAGAAGTTATCAAATATTTGAGACAACCGTCCCCAGTCAAGCTAACACTTCTTAGAGAACATAACCAGGCACTATTTGGAAAAATGAATGGCCTAGTGTGTGAGTGACTTAAAGGCTCTTCAGCCTTTTGCTCTCGCCCTGATCTGGAGTATTTCGGCCACCAGCAATAGTCCCTTAATTCCGTACCCCCAAAACATTCCATCGCGCCCATTGGCATCCTGGATTTTACCATCCAAGTGTGGATGTATATAGTGTACAACGAGGATGTCAATCCTTCTAGCTGATACGGGTAAACCAAAGCCTATTATCTGAAGAACCCTTAAGACAATCCAGTTGAGACCGCACCCCGTAAACAGAGCTGCTCCCTCTTATACGATATATATTCATCCAGGTATGTATGTAGATCGTATAGTCGTAGCAGGTACGACACGCTCATTGCTCCGGCGAACAGAGCGTCGCAATTTATGACTCCGCACTACAATTCCTCTCTAAGGCTAGCATCTAGGAGTCAGTTAGGGAAACGCGAAGCACATCGCAGGAGAGTACATAGACATCTGAGGTAACCGCCTAACACCCTCTGCTCAACTCGGCAGATTTGAAGACTATTCTATCTAATAGCGTTGAGATGATCAGGACAATCCTAGTAATGTCCAGAGCTATAGAACTGGACCCTCTCAATGTGACGCCGGAGTGCATGCTCGACGCGTCAGATTCCTTACAGTAACGGACTAGTTGCGCGATCTACATTGAACGGGCGATGAAAAATTCGCCCGTCTTTTGGCATCTACTTTGTTGAGATACCTATACTCGTAATAGTGAAATCACAAACGTGCTAGCGGACACTTTTCGCGCATGAATACCCGAGGTTTAGCCCAATATGAGAACAGCCACCAGCTCCTGTCTAGAAGCGCTTCCCTATACCATTTACATACATACCTGGATGCGCTAGTAAGAAAAAGAGATGAACGACCATGACCCCTATGTCCGAACTTCACGGCTGAGCGTTCCGTCATAGCTTGTTAAGGAGCCGACCGGTAATACTGTAACGCCAGTCAATGATGATGGGTTGCGTTAAGGTACGTGCGCGGTTCAATGCCCTGTCCAAAGTATAGTCAACACTAGGCGACCATCATCCATGGTCGCGCTCTCTATATTGCTACAGACGTCTGGACCTCTTGTCAAGTTATCATTAATACCTCGAAGCGGTAAAGGTGTTATCACCAGAGTGGCAGACGCATATCCTTTGCAATGTACCTGGCATAGACGGACCATTTAATCATGAAAACTCATTTTGAGAACAGGGGAGGACTTGTGCCAGAATTGGAGGGTCCAGCTGCTAATGGTCTTGCCGAGAATTGAAGAGACGGATCTACGTCTCGTCCCAAATCACGCTCAGGTATGCGCTCATGACGTCTCGGAGACAATTAACGACAGGCCTTAGCTTGGTCGGGCGAAGGTCTACCCAGAAGGGGTTCAGGACAAAACGGCGGACTATAAGAGGTGTACTATACAATTTACATCCATACATGGATGATTTAATGGGGTCGCTGTCATGACTCGTGGTGCGTGTCCAGGAAATCCGTGTGACACCACTTAGGGGCGTTGTATATAACCACAGTGAATATGTGGAGAATCAAACTGTTCTAGTCTGCAGCCTAACGAGTTTTATTCCAACACACTTTAATGTTCCAGTTGCCGTCCACCATCCAGGTATGTATGTAGATGGTATAGCAATGGTTACACTAGCCTCAAAACGTACTACTAGGCATGTCGGATAACGCTAAGCGACTCGATATCTGTGGTCCTGATATGATGTACGGGATGCGGCCAGTCCTGGTGTGCTCTCATGGTCGTAGATAATTTTGAGGGCCTCCGTGCCAAGGTGTTGCGTAAGTGTCGAGGCGTTCGCGAAGTATCGGGGGTGTCTGCGCTTTTTAAACTACGCCATCGCCCTATATAGGTTCTGTAGACACAGCGTTGTAGCTCGGGTTCACAAGCTCAAAAGTTTGAATCCACGGCTCCCCGTAATCCGTCCACATGGAGTGATACTGTCTTTTGTGAAGAAAAAGTACTTATCGACAGTCGTCTGGAACTCTATTATTGGTATACCTCCATGGAGGGCCTTAGCGGAAGACTACGCTGAATTGGCTGTACTTAAGTTACTCCACTGCCACAATCTGTAGAGACATGGCATGGTTGGTTCGCGGCGAAATGAGAAGCTTCGTTGGATCTAAATCCTTAACTGAGCCACGAAGGGCCCCTTTCGTTAGCCGTACCGAGTACGGAGGCTAGAACAATCTATCACCCAAAACACGAACGCGAAGGGAGTGCATAGGTGGGTCCGGTCATCCACCTAAAAACTACTGTACCCACGTAATGCAAATTTTGTTAAGCCAGGCATTTCCAGCCATATTCAGTGGCGTTACGCTTTAATCCGGGTAAGTAATTGCACCCCTTAGTGGCTTCCGGTTAGCCGAAAAAGCTTCTGCCATATACATTGGATGAGCGAGAGTGGCAAAAGTCATAGGGAATGCCGGAAAGGGCAGAAACATTACGATGTATATGTCTATAGGCTATCTCGTGTAAATCACGACTCTTAGTTGTTATCAGTTCAGACACGTTACATGGGAGAGTATATCGACATTGGTTACCAAGTTCTTCCCATAAGTCTCGAATGTAGAACACCGAAATGATTAGCCGAGTGACGAGAATCGACACCTGACGTCTGAAATCTACACCCTGTGGTAAGCGTCTCCGAACCCATCCCGGACTACCGAGTGCCTTAGGAGATCGTGAATATTGCGCTAGGTCATCCAAGTGTGAATATAGATGGTATAAAGTGTGAACCAATATATATCTCTCGATACGCGCAATGACTCTCCTTAATCAAATCCCGGCATCCATGTGTGGATGTAGATGGTGTAGCCTAGGGACGACGTCAGTTCCGGGGATGATTAATTGAGGTAACACAATCTATGGGTGCTCTCCAACAGCGGCCGAAGGATTCCAGAGCCGTCCCATTGACCTATCCTGCCGCGAGGCGGAACGCAGCACAGCCATCGTCATGTGCTTAGCCCATAACTTGATCGCGTCATACTGGTGGATCTGTAGCCAGTTGCTCCTCACGCGACTTACGGTGCCACTCAAAGCGGGACCACTGCACTAAAGAGCACTACAGCATGACTGCTCATACCGGTACTGCACGGTGAGCTGTTTTGCTACATTTGTAGGCCGTGGGCTGTAGGAGGGTATATATGCTGGTACCGCACGGGTGTAAGCTGATCGTGGCATATACAATTTACATTCACACGTGGATGCATTGGTCGTGCCTAATCGACTTGGTCGCCATAAATCACCCTCGATGGTTCAGGGTCTTGACCCTAACGCCGGAGAACACATGCCAGACAACTGTTCATAGACTGTAAAGTTTCCATCAGCAATAAGCTCTTGTTGGTGAAGGCACAACCTCCTTTGACCCGGTCTCTATATAGCTACCCAAGTACAGACTTGCTTGACCATCACCGTTCTGTGACACCGCTACATGCAATGACGGCTCCGCGCCTCCTGAGCCAGGGATTACTCGCCCCAACCTGTGCGATGCCGGCTCTAACCTTCTACCCAGGGCATCGCTGAGCAGCAACGCGGATTAATATCCAGCTGCCTTGTCCAGCGAAAGCCAAGCTTGTAGGCGAAACACTCCCGTCCAATGTCGTTGCCCCTTGAGCAGAGCAGAAACCCACGTACCCTATGTATGCCAGTGGGTAGTAGATACACACGTCTTGTTGAAGTTTATCAGGGAGCTGACAACAACTCCCTGCGTATTTCTCTGTAGTCAGGTCGACATGGTCATGCCGAGATGATCTTGAAAGATTTGTCGAACGTTGGCAATCGCACCGTAATTACTTCTGCTTTCGGTACCTAGAAGAGAAGGGAGAATCGACCGTGTTTACGGGACGGTGGACAGCTTGGGGCATGCACGTTAACTCGTAATAACAAGGTAACCGCGGCAGTCTGGACACTCAGCAACAAATCACGTTAAAGTGCTGATTCTATAGTATCGCAGAACCTAAGCGAGAAGTATAGAAGTGGGGATAAGCCGATAGAAATCGCTACTACGGTATCAGCGGGAATGAACGAAAATTGAGTCTGCAGCCTACGAGATGTATAAAGCGGCTGAACTAGTTGTTCGGACTATTGCCAAGACAGGCCAGCGGGTAGATATTTGCCTCGGTATTTGCTTCAGGGCTAACCCCACCTCTACTGCAGACGTGGATTAACTATGGCAGGCACTTGCTCCACTGTTGCCTATCGGGCTGCTGCAGAAGAGGCTTTGGTCGATATTAACTACCCGTCGGCACCCATATCTTGTTAAGCTGATGTGGACATCGCTTCGGTTGCAGGACGCTCAGCATTTTCATGGGGGACTATAATAG'
    peptide = 'YTIYIHTWM'
    # answers = ['AAGGAAGTATTTGAGCCTCATTATTAC',
    #             'AAAGAGGTGTTTGAACCTCATTACTAT',
    #             'AAGGAGGTATTTGAACCCCACTATTAC',
    #             'AAAGAAGTTTTCGAACCACATTATTAC',
    #             'AAGGAAGTGTTTGAACCTCACTATTAT',
    #             'AAAGAAGTTTTCGAGCCGCACTACTAC',
    #             'AAGGAAGTATTCGAACCACATTACTAT',
    #             'ATAATAATGCGGCTCGAATACTTCCTT',
    #             'GTAGTAATGGGGCTCGAAAACCTCCTT',
    #             'GTAGTAATGAGGTTCAAAAACCTCCTT',
    #             'GTAGTAATGGGGTTCGAAGACTTCCTT',
    #             'ATAATAGTGAGGCTCAAAAACTTCCTT',
    #             'ATAGTAATGGGGTTCGAAGACTTCCTT',
    #             'GTAGTAGTGCGGCTCAAAAACTTCCTT',
    #             'ATAGTAATGAGGTTCGAAAACCTCTTT',
    #             'ATAATAATGTGGCTCGAACACTTCTTT',
    #             'GTAGTAATGGGGCTCAAACACCTCTTT',
    #             'ATAGTAGTGAGGTTCGAAGACTTCCTT',
    #             'GTAATAGTGCGGTTCAAAAACTTCCTT',
    #             'ATAGTAGTGTGGTTCAAATACCTCCTT']

    substrings = find_substrings_encoding_amino_acid(dna, peptide)
    # print(check_answers(substrings, answers))
    print(*substrings, sep = '\n')

if __name__ == '__main__':
    main()
